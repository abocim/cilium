// SPDX-License-Identifier: Apache-2.0
// Copyright Authors of Cilium

//go:build !privileged_tests

package monitor

import (
	. "gopkg.in/check.v1"
)

func (s *MonitorSuite) TestDecodeTraceNotify(c *C) {
	tn := &TraceNotify{}
	err := DecodeTraceNotify([]byte{}, tn)
	c.Assert(err, NotNil)

	data := []byte{
		0x00,       // Type
		0x00,       // ObsPoint
		0x00, 0x00, // Source
		0x00, 0x00, 0x00, 0x00, // Hash
		0x00, 0x00, 0x00, 0x00, // OrigLen
		0x00, 0x00, // CapLen
		0x00, 0x00, // Version
		0x00, 0x00, 0x00, 0x00, // SrcLabel
		0x00, 0x00, 0x00, 0x00, // DstLabel
		0x00, 0x00, // DstID
		0x00,                   // Reason
		0x00,                   // Flags
		0x02, 0x00, 0x00, 0x00, // Ifindex
	}

	err = DecodeTraceNotify(data, tn)
	c.Assert(err, IsNil)
	c.Assert(tn.Version, Equals, uint16(TraceNotifyVersion0))
	c.Assert(tn.Ifindex, Equals, uint32(2))

	// add buffer space for OrigIP field
	data = append(data, make([]byte, len(tn.OrigIP))...)
	// set version to TraceNotifyVersion1
	data[14] = 0x01

	err = DecodeTraceNotify(data, tn)
	c.Assert(err, IsNil)
	c.Assert(tn.Version, Equals, uint16(TraceNotifyVersion1))
	c.Assert(tn.Ifindex, Equals, uint32(2))

	// set invalid version
	data[14] = 0xff
	err = DecodeTraceNotify(data, tn)
	c.Assert(err, NotNil)

	//data = []byte{5, 0, 19, 10, 204, 29, 59, 28, 94, 0, 0, 0, 94, 0, 1, 0, 2, 0, 0, 0, 0, 0, 0, 0, 40, 35, 6, 25, 0, 0, 0, 0, 248, 242, 30, 82, 217, 85, 120, 12, 240, 136, 33, 43, 8, 0, 69, 0, 0, 80, 0, 0, 64, 0, 52, 4, 242, 98, 10, 246, 48, 35, 10, 249, 14, 54, 69, 0, 0, 60, 79, 207, 64, 0, 57, 6, 209, 43, 10, 16, 0, 73, 10, 248, 11, 113, 135, 100, 35, 40, 210, 230, 67, 216, 0, 0, 0, 0, 160, 2, 250, 240, 12, 15, 0, 0, 2, 4, 5, 77, 4, 2, 8, 10, 223, 124, 127, 221, 0, 0, 0, 0, 1, 3, 3, 7, 168, 245, 0, 0, 0, 0}
	//data = []byte{5, 0, 52, 1, 157, 124, 254, 8, 94, 0, 0, 0, 94, 0, 1, 0, 2, 0, 0, 0, 0, 0, 0, 0, 144, 31, 6, 37, 0, 0, 0, 0, 248, 242, 30, 82, 217, 85, 120, 12, 240, 136, 33, 43, 134, 221, 96, 7, 172, 151, 0, 40, 6, 57, 42, 2, 5, 152, 0, 11, 255, 255, 0, 0, 0, 0, 0, 0, 0, 115, 42, 2, 5, 152, 0, 100, 0, 0, 0, 0, 0, 0, 0, 0, 14, 84, 167, 238, 31, 144, 70, 46, 55, 115, 0, 0, 0, 0, 160, 2, 253, 32, 163, 253, 0, 0, 2, 4, 5, 57, 4, 2, 8, 10, 144, 72, 99, 138, 0, 0, 0, 0, 1, 3, 3, 7, 19, 46, 10, 132, 10, 121}
	//data = []byte{5, 0, 52, 1, 67, 135, 171, 148, 134, 0, 0, 0, 128, 0, 1, 0, 2, 0, 0, 0, 0, 0, 0, 0, 175, 8, 41, 37, 0, 0, 0, 0, 248, 242, 30, 82, 217, 85, 120, 12, 240, 136, 33, 43, 134, 221, 96, 0, 0, 0, 0, 80, 41, 52, 42, 2, 5, 152, 1, 40, 0, 0, 0, 0, 0, 0, 0, 0, 66, 53, 42, 2, 5, 152, 0, 100, 0, 0, 0, 0, 0, 0, 0, 0, 14, 84, 96, 5, 133, 218, 0, 40, 6, 57, 42, 2, 5, 152, 0, 11, 255, 255, 0, 0, 0, 0, 0, 0, 0, 115, 42, 2, 5, 152, 0, 10, 238, 238, 0, 0, 0, 0, 0, 0, 0, 13, 139, 76, 8, 175, 213, 122, 191, 9, 0, 0, 0, 0, 160, 2, 253, 32, 193, 126, 0, 0, 2, 4, 5, 57, 4, 2, 8, 10, 76, 2, 198, 161, 0, 0, 2, 48, 52, 1}
	//data = []byte{5, 0, 59, 10, 185, 208, 27, 192, 134, 0, 0, 0, 128, 0, 1, 0, 2, 0, 0, 0, 0, 0, 0, 0, 175, 8, 41, 37, 0, 0, 0, 0, 248, 242, 30, 82, 217, 85, 120, 12, 240, 136, 33, 43, 134, 221, 96, 0, 0, 0, 0, 80, 41, 52, 42, 2, 5, 152, 1, 40, 0, 0, 0, 0, 0, 0, 0, 0, 65, 53, 42, 2, 5, 152, 0, 100, 0, 0, 0, 0, 0, 0, 0, 0, 14, 84, 96, 12, 110, 147, 0, 40, 6, 57, 42, 2, 5, 152, 0, 11, 255, 255, 0, 0, 0, 0, 0, 0, 0, 115, 42, 2, 5, 152, 0, 10, 238, 238, 0, 0, 0, 0, 0, 0, 0, 13, 139, 82, 8, 175, 75, 97, 52, 51, 0, 0, 0, 0, 160, 2, 253, 32, 101, 154, 0, 0, 2, 4, 5, 57, 4, 2, 8, 10, 76, 3, 55, 111, 0, 0, 0, 0, 0, 0}
	//data = []byte{5, 0, 59, 10, 67, 135, 171, 148, 134, 0, 0, 0, 128, 0, 1, 0, 2, 0, 0, 0, 0, 0, 0, 0, 175, 8, 6, 37, 0, 0, 0, 0, 248, 242, 30, 82, 217, 85, 120, 12, 240, 136, 33, 43, 134, 221, 96, 0, 0, 0, 0, 80, 41, 52, 42, 2, 5, 152, 1, 40, 0, 0, 0, 0, 0, 0, 0, 0, 66, 53, 42, 2, 5, 152, 0, 100, 0, 0, 0, 0, 0, 0, 0, 0, 14, 84, 96, 8, 61, 78, 0, 40, 6, 57, 42, 2, 5, 152, 0, 11, 255, 255, 0, 0, 0, 0, 0, 0, 0, 115, 42, 2, 5, 152, 0, 10, 238, 238, 0, 0, 0, 0, 0, 0, 0, 13, 139, 150, 8, 175, 88, 86, 148, 86, 0, 0, 0, 0, 160, 2, 253, 32, 253, 167, 0, 0, 2, 4, 5, 57, 4, 2, 8, 10, 76, 30, 49, 234, 0, 0, 0, 0, 1, 1}
	//data = append(data, make([]byte, 2)...)
	//data = []byte{5, 0, 59, 10, 67, 135, 171, 148, 215, 0, 0, 0, 128, 0, 1, 0, 2, 0, 0, 0, 0, 0, 0, 0, 175, 8, 6, 37, 0, 0, 0, 0, 248, 242, 30, 82, 217, 85, 120, 12, 240, 136, 33, 43, 134, 221, 96, 0, 0, 0, 0, 161, 41, 52, 42, 2, 5, 152, 1, 40, 0, 0, 0, 0, 0, 0, 0, 0, 66, 53, 42, 2, 5, 152, 0, 100, 0, 0, 0, 0, 0, 0, 0, 0, 14, 84, 96, 8, 61, 78, 0, 121, 6, 57, 42, 2, 5, 152, 0, 11, 255, 255, 0, 0, 0, 0, 0, 0, 0, 115, 42, 2, 5, 152, 0, 10, 238, 238, 0, 0, 0, 0, 0, 0, 0, 13, 139, 150, 8, 175, 88, 86, 148, 87, 149, 131, 102, 25, 128, 24, 1, 251, 142, 74, 0, 0, 1, 1, 8, 10, 76, 30, 49, 246, 243, 37, 174, 150, 71, 69, 86, 0, 0, 0}
	//fmt.Printf("Conn summary: %v\n", GetConnectionSummary(data[32:]))
	//c.Assert(1, Equals, uint32(2))
}
